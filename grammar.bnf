<program> ::= begin <stmt_list> end
<stmt_list> ::= <empty> | <stmt>; | <stmt>; <stmt_list>
<stmt> ::= <matched> | <unmatched>
<stmt_block> ::= { <stmt_list> }

/* 1-) Identifier */
<identifier> ::= // ToDo

/* 2-) Assignment Statement */
<assignment_stmt> ::=  <identifier> <assign_op> <arithmetic_expr> ;
                     | <identifier> <assign_op> <constant> ;

<constant> ::= | <int> | <char> | <string> | <boolean> | <double> | <list>

<char> ::= <char_identifier> <digit> <char_identifier>
         | <char_identifier> <letter> <char_identifier>
         | <char_identifier> <symbol> <char_identifier>
<int> ::= <digit> | <sign> <digit> | <int> <digit>
<string> ::= <char_list>
<boolean> ::= <true> | <false>
<double> ::= // ToDo
<list> ::= // ToDo

/* 3-) and 4-) Expressions */
<expr> ::= <arithmetic_expr> | <relational_expr> | <boolean_expr> // their combination? logic_expr? ToDo

    //  3-) Arithmetic expression definition includes precedence, associativity of the operators
    <arithmetic_expr> ::= <arithmetic_expr> + <term> | <arithmetic_expr> - <term> | <term>
    <term> ::= <term> * <factor> | <term> / <factor> | <factor>
    <factor> ::= <expr> ** <factor> | <arithmetic_expr>
    <arithmetic_expr> ::= ( <arithmetic_expr> ) | <identifier>

    // Relational expression definition
    <relational_expr> ::= //ToDo

    // Boolean expression definition
    <boolean_expr> ::= //ToDo

/* 5-) Loops */
<for_loop> ::= for ( <assignment_stmt> ; <relational_expr> ; <arithmetic_expr> ) <stmt_block>
<while_loop> ::= while ( <expr> ) <stmt_block>

/* 6-) Conditional statements */
<matched> ::= if ( <logic_expr> ) then <matched> else <matched>
            | <stmt_block>
<unmatched> ::= if ( <logic_expr> ) then <stmt_block>
              | if ( <logic_expr> ) then <matched> else <unmatched>

/* 7-) Statements for input/output */
// ToDo

/* 8-) Function definition and function calls */
<function_declaration> ::= <function_keyword> <function_name> ( <function_params> ) <stmt_block>
<function_call> ::= <function_name> ( <function_params> )

<function_keyword> ::= func
<function_name> ::= <string>
<function_params> ::= <empty> | <function_param> | <function_params> , <function_param>
<function_param> ::= <identifier>

/* 9-) Comments */
<comment> ::= <slash> <slash> <string>

/* Miscellaneous */
<empty> ::=
<assign_op> ::= =
<char_list> ::= <char_list> <char> | <char>
<char_identifier> ::= '
<letter> ::= = a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|
               A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z
<symbol> ::= $ | ! | # | &
<digit> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<left_paranthesis> ::= (
<right_paranthesis> ::= )
<slash> ::= /
<semicolumn> ::= ;
<sign> ::= + | -
<true> = true
<false> = false
