<program> ::=  <begin> <stmt_list> <end>
<stmt_list> ::= <stmt> <semi_col> | <stmt_list> <stmt> <semi_col>
<stmt> ::= <matched> | <unmatched> | <empty>
<stmt_block> ::= <l_cur> <stmt_list> <r_cur>


/* 1-) Identifier */
<ident_char> ::= <digit> | <letter> | <underscore>
<ident_char_list> ::= <ident_char_list> <ident_char> | <ident_char>
<identifier> ::= <letter> | <letter> <ident_char_list>


/* 2-) Assignment Statement */
<assignment_stmt> ::=  <identifier> <assign_op> <expr> | <identifier> <assign_op> <function_call>

<constant> ::=  <int> | <char> | <string> | <boolean> | <float>
<constant_list> ::= <constant_list> <comma> <constant> | <constant>


<boolean> ::= <true> | <false>
<float> ::= <number> . <number> | <sign> <number> . <number>
<int> ::= <number> | <sign> <number>

<character> ::= <digit> | <letter> | <underscore> | <symbol>
<char> ::= <char_identifier> <character> <char_identifier>
<char_list> ::= <char_list> <character> | <character>
<string> ::= <quote> <char_list> <quote>


/* 3-) and 4-) Expressions */
<expr> ::= <conditional_expr>
<conditional_expr> ::= <conditional_expr> <or_op> <conditional_term> | <conditional_term>
<conditional_term> ::= <conditional_term> <and_op> <conditional_factor> | <conditional_factor>
<conditional_factor> ::= <conditional_factor> <not_op> <conditional_result> | <conditional_result>
<conditional_result> ::= <l_p> <conditional_expr> <r_p> | <comp_expr>
<comp_expr> ::= <comp_expr> <comparison_op> <arithmetic_expr> | <arithmetic_expr>


//  3-) Arithmetic expression definition includes precedence, associativity of the operators
<arithmetic_expr> ::= <arithmetic_expr> <add_op> <arithmetic_term> | <arithmetic_expr> <subs_op> <arithmetic_term> | <arithmetic_term>
<arithmetic_term> ::= <arithmetic_term> <mult_op> <arithmetic_factor> | <arithmetic_term> <div_op> <arithmetic_factor>
                      | <arithmetic_term> <mod_op> <arithmetic_factor> | <arithmetic_factor>
<arithmetic_factor> ::= <arithmetic_factor> <base_op> <arithmetic_result> | <arithmetic_result>
<arithmetic_result> ::= <l_p> <arithmetic_expr> <r_p> | <constant> | <identifier> | <function_call>


/* 5-) Loops */
<for_loop> ::= for <l_p> <assignment_stmt> ; <conditional_expr> ; <assignment_stmt> <r_p> <stmt_block>
<while_loop> ::= while <l_p> <conditional_expr> <r_p> <stmt_block>


/* 6-) Conditional statements */
<matched> ::= if <l_p> <conditional_expr> <r_p> then <l_cur> <matched> <r_cur> else <l_cur> <matched> <r_cur>
            | <for_loop> | <while_loop> | <function_declaration> | <function_call>
            | <assignment_stmt> | <return_stmt> | <input_stmt> | <output_stmt>
<unmatched> ::= if <l_p> <conditional_expr> <r_p> then <stmt_block>
              | if <l_p> <conditional_expr> <r_p> then <matched> else <unmatched>


/* 7-) Statements for input/output */
<input_stmt> ::= <input_key> <l_p> <r_p>
<output_stmt> ::= <output_key> <l_p> <expr> <r_p>


/* 8-) Function definition and function calls */
<function_declaration> ::= <function_key> <function_name> <l_p> <function_params> <r_p> <stmt_block>   | <function_key> <function_name> <l_p> <r_p> <stmt_block>
<function_call> ::= <function_name> <l_p> <expr_list> <r_p> |  <function_name> <l_p>  <r_p> |<primitive_function_key> <l_p> <r_p>
<expr_list> ::= <expr_list> <comma> <expr> | <expr>
<return_stmt> ::= <return_key> <expr>

<function_name> ::= <identifier>
<function_params> ::=  <function_param> | <function_params> , <function_param>
<function_param> ::= <identifier>


/* 9-) Comments */
<comment> ::= <slash> <slash> <string>


/* 10-) Primitive Functions */
<primitive_function_key> ::= readInclination | readAltitude
                            | readTemperature | readAcceleration
                            | turnOnCamera | turnOffCamera
                            | takePicture | readTimestamp | connectToBase

/* Miscellaneous */
<begin> ::= begin
<end> ::= end
<comma> ::= ,
<not_op> ::= !
<l_cur> ::= {
<r_cur> ::= }
<l_p> ::= (
<r_p> ::= )
<l_sqr> ::= [
<r_sqr> ::= ]
<return_key> ::= return
<function_key> ::= func
<begin_key> ::= begin
<end_key> ::= end
<input_key> ::= rin
<output_key> ::= rout
<empty> ::=
<add_op> ::= +
<subs_op> ::= -
<mult_op> ::= *
<div_op> ::= /
<mod_op> ::= %
<base_op> ::= **
<relational_op> ::= && | || | & | |
<comparison_op> ::= == | != | >= | > | <= | <
<assign_op> ::= =
<char_identifier> ::= '
<underscore> ::= _
<letter> ::= = a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|
               A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z
<symbol> ::= $ | ! | # | & | \s | \n | \t | \"
<digit> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<number> ::= <number> <digit> | <digit>
<slash> ::= /
<semicolumn> ::= ;
<sign> ::= + | -
<true> = true
<false> = false